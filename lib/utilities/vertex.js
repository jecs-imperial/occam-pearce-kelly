"use strict";

function vertexNamesFromVertices(vertices) {
  var vertexNames = vertices.map(function (vertex) {
    var vertexName = vertex.getName();
    return vertexName;
  });
  return vertexNames;
}

function topologicallyOrderVertices(vertices) {
  ///
  vertices.sort(function (firstVertex, secondVertex) {
    var firstVertexIndex = firstVertex.getIndex(),
        secondVertexIndex = secondVertex.getIndex();

    if (false) {} else if (firstVertexIndex < secondVertexIndex) {
      return -1;
    } else if (firstVertexIndex > secondVertexIndex) {
      return +1;
    }
  });
  var topologicallyOrderedVertices = vertices; ///

  return topologicallyOrderedVertices;
}

module.exports = {
  vertexNamesFromVertices: vertexNamesFromVertices,
  topologicallyOrderVertices: topologicallyOrderVertices
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnRleC5qcyJdLCJuYW1lcyI6WyJ2ZXJ0ZXhOYW1lc0Zyb21WZXJ0aWNlcyIsInZlcnRpY2VzIiwidmVydGV4TmFtZXMiLCJtYXAiLCJ2ZXJ0ZXgiLCJ2ZXJ0ZXhOYW1lIiwiZ2V0TmFtZSIsInRvcG9sb2dpY2FsbHlPcmRlclZlcnRpY2VzIiwic29ydCIsImZpcnN0VmVydGV4Iiwic2Vjb25kVmVydGV4IiwiZmlyc3RWZXJ0ZXhJbmRleCIsImdldEluZGV4Iiwic2Vjb25kVmVydGV4SW5kZXgiLCJ0b3BvbG9naWNhbGx5T3JkZXJlZFZlcnRpY2VzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsdUJBQVQsQ0FBaUNDLFFBQWpDLEVBQTJDO0FBQ3pDLE1BQU1DLFdBQVcsR0FBR0QsUUFBUSxDQUFDRSxHQUFULENBQWEsVUFBU0MsTUFBVCxFQUFpQjtBQUNoRCxRQUFNQyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0UsT0FBUCxFQUFuQjtBQUVBLFdBQU9ELFVBQVA7QUFDRCxHQUptQixDQUFwQjtBQU1BLFNBQU9ILFdBQVA7QUFDRDs7QUFFRCxTQUFTSywwQkFBVCxDQUFvQ04sUUFBcEMsRUFBOEM7QUFBRztBQUMvQ0EsRUFBQUEsUUFBUSxDQUFDTyxJQUFULENBQWMsVUFBU0MsV0FBVCxFQUFzQkMsWUFBdEIsRUFBb0M7QUFDaEQsUUFBTUMsZ0JBQWdCLEdBQUdGLFdBQVcsQ0FBQ0csUUFBWixFQUF6QjtBQUFBLFFBQ01DLGlCQUFpQixHQUFHSCxZQUFZLENBQUNFLFFBQWIsRUFEMUI7O0FBR0EsUUFBSSxLQUFKLEVBQVcsQ0FFVixDQUZELE1BRU8sSUFBSUQsZ0JBQWdCLEdBQUdFLGlCQUF2QixFQUEwQztBQUMvQyxhQUFPLENBQUMsQ0FBUjtBQUNELEtBRk0sTUFFQyxJQUFJRixnQkFBZ0IsR0FBR0UsaUJBQXZCLEVBQTBDO0FBQ2hELGFBQU8sQ0FBQyxDQUFSO0FBQ0Q7QUFDRixHQVhEO0FBYUEsTUFBTUMsNEJBQTRCLEdBQUdiLFFBQXJDLENBZDRDLENBY0k7O0FBRWhELFNBQU9hLDRCQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmaEIsRUFBQUEsdUJBQXVCLEVBQXZCQSx1QkFEZTtBQUVmTyxFQUFBQSwwQkFBMEIsRUFBMUJBO0FBRmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gdmVydGV4TmFtZXNGcm9tVmVydGljZXModmVydGljZXMpIHtcbiAgY29uc3QgdmVydGV4TmFtZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgY29uc3QgdmVydGV4TmFtZSA9IHZlcnRleC5nZXROYW1lKCk7XG5cbiAgICByZXR1cm4gdmVydGV4TmFtZTtcbiAgfSk7XG5cbiAgcmV0dXJuIHZlcnRleE5hbWVzO1xufVxuXG5mdW5jdGlvbiB0b3BvbG9naWNhbGx5T3JkZXJWZXJ0aWNlcyh2ZXJ0aWNlcykgeyAgLy8vXG4gIHZlcnRpY2VzLnNvcnQoZnVuY3Rpb24oZmlyc3RWZXJ0ZXgsIHNlY29uZFZlcnRleCkge1xuICAgIGNvbnN0IGZpcnN0VmVydGV4SW5kZXggPSBmaXJzdFZlcnRleC5nZXRJbmRleCgpLFxuICAgICAgICAgIHNlY29uZFZlcnRleEluZGV4ID0gc2Vjb25kVmVydGV4LmdldEluZGV4KCk7XG5cbiAgICBpZiAoZmFsc2UpIHtcblxuICAgIH0gZWxzZSBpZiAoZmlyc3RWZXJ0ZXhJbmRleCA8IHNlY29uZFZlcnRleEluZGV4KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlICBpZiAoZmlyc3RWZXJ0ZXhJbmRleCA+IHNlY29uZFZlcnRleEluZGV4KSB7XG4gICAgICByZXR1cm4gKzE7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCB0b3BvbG9naWNhbGx5T3JkZXJlZFZlcnRpY2VzID0gdmVydGljZXM7ICAvLy9cblxuICByZXR1cm4gdG9wb2xvZ2ljYWxseU9yZGVyZWRWZXJ0aWNlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZlcnRleE5hbWVzRnJvbVZlcnRpY2VzLFxuICB0b3BvbG9naWNhbGx5T3JkZXJWZXJ0aWNlc1xufTtcbiJdfQ==